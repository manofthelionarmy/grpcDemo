// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pkg/pokemon/pokemon.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PokemonServiceClient is the client API for PokemonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PokemonServiceClient interface {
	PokeDex(ctx context.Context, in *PokemonRequest, opts ...grpc.CallOption) (*PokemonResponse, error)
}

type pokemonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPokemonServiceClient(cc grpc.ClientConnInterface) PokemonServiceClient {
	return &pokemonServiceClient{cc}
}

func (c *pokemonServiceClient) PokeDex(ctx context.Context, in *PokemonRequest, opts ...grpc.CallOption) (*PokemonResponse, error) {
	out := new(PokemonResponse)
	err := c.cc.Invoke(ctx, "/PokemonService/PokeDex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokemonServiceServer is the server API for PokemonService service.
// All implementations must embed UnimplementedPokemonServiceServer
// for forward compatibility
type PokemonServiceServer interface {
	PokeDex(context.Context, *PokemonRequest) (*PokemonResponse, error)
	mustEmbedUnimplementedPokemonServiceServer()
}

// UnimplementedPokemonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPokemonServiceServer struct {
}

func (UnimplementedPokemonServiceServer) PokeDex(context.Context, *PokemonRequest) (*PokemonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PokeDex not implemented")
}
func (UnimplementedPokemonServiceServer) mustEmbedUnimplementedPokemonServiceServer() {}

// UnsafePokemonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PokemonServiceServer will
// result in compilation errors.
type UnsafePokemonServiceServer interface {
	mustEmbedUnimplementedPokemonServiceServer()
}

func RegisterPokemonServiceServer(s grpc.ServiceRegistrar, srv PokemonServiceServer) {
	s.RegisterService(&PokemonService_ServiceDesc, srv)
}

func _PokemonService_PokeDex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PokemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokemonServiceServer).PokeDex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PokemonService/PokeDex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokemonServiceServer).PokeDex(ctx, req.(*PokemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PokemonService_ServiceDesc is the grpc.ServiceDesc for PokemonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PokemonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PokemonService",
	HandlerType: (*PokemonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PokeDex",
			Handler:    _PokemonService_PokeDex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pokemon/pokemon.proto",
}
